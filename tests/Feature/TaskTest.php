<?php

namespace Tests\Feature;

use App\Enums\RoleEnum;
use App\Permission;
use App\Providers\PermissionsServiceProvider;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class TaskTest extends TestCase
{
    use RefreshDatabase;

    protected $user;
    protected $project;
    protected $task;
    protected $attributes;

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seedData();

        $this->user = factory(\App\User::class)->create();

        //set < user->can() > after database was seeded
        $test = new PermissionsServiceProvider($this->app);
        $test->testing();

        $this->project = factory(\App\Project::class)->create();

        $this->user->giveRoleTo(RoleEnum::TEAM_LEADER);

        $this->attributes = [ 'description' => 'this is a new task'];
    }

    /** @test */
    public function a_user_can_create_a_task()
    {

        //Given we have a logged in user who is a team leader
        $this->actingAs($this->user);

        $this->assertTrue($this->user->can('add-task'));

        $this->get('/projects/'.$this->project->id)
            ->assertDontSee('this is a new task');

        $this->post('projects/'. $this->project->id .'/add-task')
            ->assertSee('New Task');

        //when they hit endpoint /projects/{project}/tasks with the given attributes
        $this->post('projects/'.$this->project->id .'/tasks', $this->attributes);

        //the new task should appear on the projects view
        $this->get('/projects/'.$this->project->id)
           ->assertSee('this is a new task');
    }

    /** @test */
    public function a_user_can_edit_a_task()
    {
        //Given we have a logged in user who is a team leader
        $this->actingAs($this->user);

        $this->assertTrue($this->user->can('edit-task'));

        //and a task in their project
        $this->post('/projects/'.$this->project->id .'/tasks', $this->attributes);

        $this->get('/projects/'.$this->project->id)
            ->assertSee('this is a new task');

        $this->task = $this->project->tasks->first();

        //when they hit the endpoint /projects/{project}/tasks/edit/{task} and visit the edit form, they can edit the task description
        $this->get('/projects/'.$this->project->id .'/tasks/edit/'. $this->task->id)
            ->assertSee('Update');

        $data = ['description'=>$this->task->description." UPDATED"];

        $this->patch('/projects/'.$this->project->id .'/tasks/edit/'. $this->task->id, $data);

        //the edited task should appear on the projects view
        $this->get('/projects/'.$this->project->id)
            ->assertSee('this is a new task UPDATED');

    }

    /** @test */
    public function a_user_can_delete_a_task()
    {
        //Given we have a logged in user who is a team leader
        $this->actingAs($this->user);

        $this->assertTrue($this->user->can('delete-task'));

        //and a task in their project
        $this->post('projects/'.$this->project->id .'/tasks', $this->attributes);

        $this->get('/projects/'.$this->project->id)
            ->assertSee('this is a new task');

        $this->task = $this->project->tasks->first();

        //when they hit the endpoint /projects/{project}/delete/tasks/{task}
        $this->delete('projects/'.$this->project->id .'/tasks/delete/'. $this->task->id);

        //the deleted task should NOT appear on the projects view
        $this->get('/projects/'.$this->project->id)
            ->assertDontSee('this is a new task');

    }

    /** @test */
    public function guest_or_members_cannot_create_a_task()
    {
        //When a guest is trying to add a task
        $this->post('projects/'.$this->project->id .'/tasks', $this->attributes)->assertRedirect('login');

        $this->user = factory(\App\User::class)->create();

        $this->actingAs($this->user);

        $this->user->giveRoleTo(RoleEnum::MEMBER);

        $this->assertFalse($this->user->can('add-task'));

        //When a user with member role is trying to add a task
        $this->post('projects/'. $this->project->id .'/add-task')->assertStatus(403);

        $this->post('projects/'.$this->project->id .'/tasks', $this->attributes)->assertStatus(403);
    
    }

    /** @test */
    public function guest_or_members_cannot_edit_a_task()
    {
        //When a guest is trying to edit a task
        $this->task = factory(\App\Task::class)->create();

        $this->patch('projects/'.$this->project->id .'/tasks/edit/'. $this->task->id, $this->attributes)->assertRedirect('login');

        $this->user = factory(\App\User::class)->create();

        $this->actingAs($this->user);

        $this->user->giveRoleTo(RoleEnum::MEMBER);

        $this->assertFalse($this->user->can('edit-task'));

        //When a user with member role is trying to edit a task
        $this->patch('projects/'.$this->project->id .'/tasks/edit/'. $this->task->id, $this->attributes)->assertStatus(403);
    }

    /** @test */
    public function guest_or_members_cannot_delete_a_task()
    {
        //When a guest is trying to edit a task
        $this->task = factory(\App\Task::class)->create();

        $this->patch('projects/'.$this->project->id .'/tasks/edit/'. $this->task->id, $this->attributes)->assertRedirect('login');

        $this->user = factory(\App\User::class)->create();

        $this->actingAs($this->user);

        $this->user->giveRoleTo(RoleEnum::MEMBER);

        $this->assertFalse($this->user->can('edit-task'));

        //When a user with member role is trying to delete a task
        $this->patch('projects/'.$this->project->id .'/tasks/edit/'. $this->task->id, $this->attributes)->assertStatus(403);
    }
}
